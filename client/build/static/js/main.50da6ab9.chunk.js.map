{"version":3,"sources":["../../frontend/src/CustomGraphiQL.js","../../frontend/src/App.js","../../frontend/src/serviceWorker.js","../../frontend/src/index.js","../../frontend/src/graphiqlDefaultText.js","../../frontend/node_modules/graphql-language-service-interface/dist sync /^.*$","../../frontend/src/graphiqlVariables.js"],"names":["defaultFetcher","_ref","Object","asyncToGenerator","regenerator_default","a","mark","_callee","graphQLParams","wrap","_context","prev","next","fetch","method","headers","Content-Type","body","JSON","stringify","then","res","json","abrupt","sent","stop","_x","apply","this","arguments","CustomGraphiQL","props","react_default","createElement","dist_default","assign","editorTheme","fetcher","query","defaultQueries","defaultQuery","variables","defaultVariables","Logo","Toolbar","Button","onClick","window","open","label","title","children","App","style","height","src_CustomGraphiQL","Boolean","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","map",".","./","./GraphQLLanguageService","./GraphQLLanguageService.js","./GraphQLLanguageService.js.flow","./autocompleteUtils","./autocompleteUtils.js","./autocompleteUtils.js.flow","./getAutocompleteSuggestions","./getAutocompleteSuggestions.js","./getAutocompleteSuggestions.js.flow","./getDefinition","./getDefinition.js","./getDefinition.js.flow","./getDiagnostics","./getDiagnostics.js","./getDiagnostics.js.flow","./getHoverInformation","./getHoverInformation.js","./getHoverInformation.js.flow","./getOutline","./getOutline.js","./getOutline.js.flow","./index","./index.js","./index.js.flow","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","resolve"],"mappings":"gPAOMA,UAAc,eAAAC,EAAAC,OAAAC,EAAA,EAAAD,CAAAE,EAAAC,EAAAC,KAAG,SAAAC,EAAOC,GAAP,OAAAJ,EAAAC,EAAAI,KAAA,SAAAC,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,cAAAF,EAAAE,KAAA,EACNC,MAAM,WAAY,CAC3BC,OAAQ,OACRC,QAAS,CACLC,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAUX,KACtBY,KAAK,SAAAC,GACJ,OAAOA,EAAIC,SARI,cAAAZ,EAAAa,OAAA,SAAAb,EAAAc,MAAA,wBAAAd,EAAAe,SAAAlB,MAAH,gBAAAmB,GAAA,OAAAzB,EAAA0B,MAAAC,KAAAC,YAAA,IA6BLC,EAjBQ,SAAAC,GACnB,OACIC,EAAA3B,EAAA4B,cAACC,EAAA7B,EAADH,OAAAiC,OAAA,CAAUC,YAAY,aAAaC,QAASrC,EAAgBsC,MAAOC,IAAgBC,aAAcD,IAAgBE,UAAWC,KAAqBX,GAC7IC,EAAA3B,EAAA4B,cAACC,EAAA7B,EAASsC,KAAV,4CAGAX,EAAA3B,EAAA4B,cAACC,EAAA7B,EAASuC,QAAV,KACIZ,EAAA3B,EAAA4B,cAACC,EAAA7B,EAASwC,OAAV,CACAC,QAAS,kBAAKC,OAAOC,KAAK,8BAC1BC,MAAM,oBACNC,MAAM,6BAGTnB,EAAMoB,WCrBJC,MARf,WACI,OACIpB,EAAA3B,EAAA4B,cAAA,OAAKoB,MAAO,CAACC,OAAQ,UACjBtB,EAAA3B,EAAA4B,cAACsB,EAAD,QCMQC,QACW,cAA7BT,OAAOU,SAASC,UAEe,UAA7BX,OAAOU,SAASC,UAEhBX,OAAOU,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO7B,EAAA3B,EAAA4B,cAAC6B,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM/C,KAAK,SAAAgD,GACjCA,EAAaC,iCEtBnBC,EAAOC,QA7GkB,kvDCAzB,IAAAC,EAAA,CACAC,IAAA,GACAC,KAAA,GACAC,2BAAA,GACAC,8BAAA,GACAC,mCAAA,IACAC,sBAAA,GACAC,yBAAA,GACAC,8BAAA,IACAC,+BAAA,GACAC,kCAAA,GACAC,uCAAA,IACAC,kBAAA,GACAC,qBAAA,GACAC,0BAAA,IACAC,mBAAA,GACAC,sBAAA,GACAC,2BAAA,IACAC,wBAAA,GACAC,2BAAA,GACAC,gCAAA,IACAC,eAAA,GACAC,kBAAA,GACAC,uBAAA,IACAC,UAAA,GACAC,aAAA,GACAC,kBAAA,KAIA,SAAAC,EAAAC,GACA,IAAAC,EAAAC,EAAAF,GACA,OAAAG,EAAAF,GAEA,SAAAC,EAAAF,GACA,IAAAG,EAAAC,EAAAhC,EAAA4B,GAAA,CACA,IAAAK,EAAA,IAAAC,MAAA,uBAAAN,EAAA,KAEA,MADAK,EAAAE,KAAA,mBACAF,EAEA,OAAAjC,EAAA4B,GAEAD,EAAAS,KAAA,WACA,OAAA1G,OAAA0G,KAAApC,IAEA2B,EAAAU,QAAAP,EACAhC,EAAAC,QAAA4B,EACAA,EAAAE,GAAA,qBCxCA/B,EAAOC,QAPgB","file":"static/js/main.50da6ab9.chunk.js","sourcesContent":["import React from \"react\";\nimport GraphiQL from \"graphiql\";\nimport defaultVariables from \"./graphiqlVariables.js\";\nimport defaultQueries from \"./graphiqlDefaultText.js\";\n\nimport \"./CustomGraphQL.css\";\n\nconst defaultFetcher = async (graphQLParams) => {\n    return await fetch(\"/graphql\", {\n        method: \"POST\",\n        headers: {\n            \"Content-Type\": \"application/json\"\n        },\n        body: JSON.stringify(graphQLParams)\n    }).then(res => {\n        return res.json();\n    });\n}\n\nconst CustomGraphiQL = props => {\n    return (\n        <GraphiQL editorTheme=\"the-matrix\" fetcher={defaultFetcher} query={defaultQueries} defaultQuery={defaultQueries} variables={defaultVariables}{...props}>\n            <GraphiQL.Logo>\n                ActiveCampaign API GraphQL Endpoint\n            </GraphiQL.Logo>\n            <GraphiQL.Toolbar>\n                <GraphiQL.Button\n                onClick={()=> window.open(\"https://dennis-hodges.com\")}\n                label=\"dennis-hodges.com\"\n                title=\"Go to dennis-hodges.com\"\n                />\n            </GraphiQL.Toolbar>\n            {props.children}\n        </GraphiQL>\n    );\n}\nexport default CustomGraphiQL;","import React from 'react';\nimport CustomGraphiQL from \"./CustomGraphiQL.js\";\n\nfunction App() {\n    return (\n        <div style={{height: \"100vh\"}}>    \n            <CustomGraphiQL />\n        </div>\n    );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","const graphiqlDefaultText = `# To learn about GraphQL, I have taken Active-Campaign's REST API and \n# wrapped it in a GraphQL API which has a single endpoint.\n\n# Press the button to select one of the queries or mutations to run. \n# You can add or edit queries and mutations below.\n\nquery findContact ($contactID: ID!){\n  contact (id: $contactID){\n    email\n    firstName\n    lastName\n  }\n}\n  \nquery allContacts {\n  contacts {\n    id\n    orgid\n    orgname\n    firstName\n    lastName\n    email\n  }\n}\n  \nquery findCampaign ($campaignID: ID!){\n  campaign(id: $campaignID){\n    name\n    type\n    user\n    userid\n  }\n}\n\nquery allCampaigns {\n  campaigns {\n    name\n    type\n    user\n    userid\n  }\n}\n\nquery findScore ($scoreID: ID!){\n  score(id: $scoreID){\n    name\n    descript\n    status\n  }\n}\n\nquery allScores {\n  scores{\n    name\n    status\n  }\n}\n\nquery findBranding ($brandingID: ID!){\n  branding (id: $brandingID){\n    siteName, \n    siteLogoSmall\n  }\n}\n\nquery allBrandings {\n  brandings {\n    siteName\n    siteLogoSmall\n  }\n}\n\n## Mutations ##\n\nmutation createContact {\n  createContact(email: \"emptynest@shadypines.com\", lastName: \"Weston\", firstName: \"Harry\"){\n    id\n    cdate\n    email\n  }\n}\n\nmutation updateContact {\n  updateContact( email: \"sophiap21@shadypines.com\", id: 11\n    ){\n    lastName\n    firstName\n    email\n  }\n}\n\nmutation deleteContact {\n  deleteContact(id: 27){\n    deleted_at\n  }\n}\n\nmutation updateBranding {\n  updateBranding(id:1, siteLogoSmall: \"https://www.dennis-hodges.com/favicon.ico\"){\n    siteLogoSmall\n  }\n}\n\nmutation updateBrandingAgain {\n  updateBranding(id:1, siteLogoSmall: \"https://www.dennis-hodges.com/wrong-link\"){\n    siteLogoSmall\n  }\n}\n`;\nmodule.exports = graphiqlDefaultText;\n\n","var map = {\n\t\".\": 30,\n\t\"./\": 30,\n\t\"./GraphQLLanguageService\": 62,\n\t\"./GraphQLLanguageService.js\": 62,\n\t\"./GraphQLLanguageService.js.flow\": 179,\n\t\"./autocompleteUtils\": 43,\n\t\"./autocompleteUtils.js\": 43,\n\t\"./autocompleteUtils.js.flow\": 180,\n\t\"./getAutocompleteSuggestions\": 34,\n\t\"./getAutocompleteSuggestions.js\": 34,\n\t\"./getAutocompleteSuggestions.js.flow\": 181,\n\t\"./getDefinition\": 44,\n\t\"./getDefinition.js\": 44,\n\t\"./getDefinition.js.flow\": 182,\n\t\"./getDiagnostics\": 46,\n\t\"./getDiagnostics.js\": 46,\n\t\"./getDiagnostics.js.flow\": 183,\n\t\"./getHoverInformation\": 47,\n\t\"./getHoverInformation.js\": 47,\n\t\"./getHoverInformation.js.flow\": 184,\n\t\"./getOutline\": 61,\n\t\"./getOutline.js\": 61,\n\t\"./getOutline.js.flow\": 185,\n\t\"./index\": 30,\n\t\"./index.js\": 30,\n\t\"./index.js.flow\": 186\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 85;","const graphiqlVariables = `{\n    \"contactID\": 11,\n    \"campaignID\": 1,\n    \"scoreID\": 1,\n    \"brandingID\": 1\n }`\n\nmodule.exports = graphiqlVariables;"],"sourceRoot":""}